datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserProfile {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  contactDetails String?
  profilePic     Json?
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model Category {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  description String?
  ads         Ad[]
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int?
  comment   String?
  reviewer  String?
  reviewee  String?
}

model Ad {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String?
  description  String?
  price        Float?
  category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   String?
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  transactions Transaction[]
  adminPanels  AdminPanel[]
}

model Transaction {
  id         String                 @id @default(cuid())
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  totalPrice Float?
  status     EnumTransactionStatus?
  buyer      String?
  seller     String?
  ad         Ad?                    @relation(fields: [adId], references: [id])
  adId       String?
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?
  sender    String?
  receiver  String?
}

model AdminPanel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ad        Ad?      @relation(fields: [adId], references: [id])
  adId      String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  firstName    String?
  lastName     String?
  username     String        @unique
  email        String?       @unique
  password     String
  roles        Json
  userProfiles UserProfile[]
  ads          Ad[]
  adminPanels  AdminPanel[]
}

enum EnumTransactionStatus {
  Option1
}
