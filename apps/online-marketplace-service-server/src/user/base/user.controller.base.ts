/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";
import { AdFindManyArgs } from "../../ad/base/AdFindManyArgs";
import { Ad } from "../../ad/base/Ad";
import { AdWhereUniqueInput } from "../../ad/base/AdWhereUniqueInput";
import { AdminPanelFindManyArgs } from "../../adminPanel/base/AdminPanelFindManyArgs";
import { AdminPanel } from "../../adminPanel/base/AdminPanel";
import { AdminPanelWhereUniqueInput } from "../../adminPanel/base/AdminPanelWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userProfiles")
  @ApiNestedQuery(UserProfileFindManyArgs)
  async findUserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserProfile[]> {
    const query = plainToClass(UserProfileFindManyArgs, request.query);
    const results = await this.service.findUserProfiles(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contactDetails: true,
        profilePic: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userProfiles")
  async connectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userProfiles")
  async updateUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userProfiles")
  async disconnectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ads")
  @ApiNestedQuery(AdFindManyArgs)
  async findAds(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Ad[]> {
    const query = plainToClass(AdFindManyArgs, request.query);
    const results = await this.service.findAds(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        price: true,

        category: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ads")
  async connectAds(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ads")
  async updateAds(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ads")
  async disconnectAds(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/adminPanels")
  @ApiNestedQuery(AdminPanelFindManyArgs)
  async findAdminPanels(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<AdminPanel[]> {
    const query = plainToClass(AdminPanelFindManyArgs, request.query);
    const results = await this.service.findAdminPanels(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        ad: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adminPanels")
  async connectAdminPanels(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdminPanelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adminPanels: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adminPanels")
  async updateAdminPanels(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdminPanelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adminPanels: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adminPanels")
  async disconnectAdminPanels(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AdminPanelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adminPanels: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
