/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdminPanel as PrismaAdminPanel,
  Ad as PrismaAd,
  User as PrismaUser,
} from "@prisma/client";

export class AdminPanelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminPanelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminPanel.count(args);
  }

  async adminPanels(
    args: Prisma.AdminPanelFindManyArgs
  ): Promise<PrismaAdminPanel[]> {
    return this.prisma.adminPanel.findMany(args);
  }
  async adminPanel(
    args: Prisma.AdminPanelFindUniqueArgs
  ): Promise<PrismaAdminPanel | null> {
    return this.prisma.adminPanel.findUnique(args);
  }
  async createAdminPanel(
    args: Prisma.AdminPanelCreateArgs
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.create(args);
  }
  async updateAdminPanel(
    args: Prisma.AdminPanelUpdateArgs
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.update(args);
  }
  async deleteAdminPanel(
    args: Prisma.AdminPanelDeleteArgs
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.delete(args);
  }

  async getAd(parentId: string): Promise<PrismaAd | null> {
    return this.prisma.adminPanel
      .findUnique({
        where: { id: parentId },
      })
      .ad();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.adminPanel
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
