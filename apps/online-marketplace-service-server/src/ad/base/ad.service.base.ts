/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ad as PrismaAd,
  Transaction as PrismaTransaction,
  AdminPanel as PrismaAdminPanel,
  Category as PrismaCategory,
  User as PrismaUser,
} from "@prisma/client";

export class AdServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AdCountArgs, "select">): Promise<number> {
    return this.prisma.ad.count(args);
  }

  async ads(args: Prisma.AdFindManyArgs): Promise<PrismaAd[]> {
    return this.prisma.ad.findMany(args);
  }
  async ad(args: Prisma.AdFindUniqueArgs): Promise<PrismaAd | null> {
    return this.prisma.ad.findUnique(args);
  }
  async createAd(args: Prisma.AdCreateArgs): Promise<PrismaAd> {
    return this.prisma.ad.create(args);
  }
  async updateAd(args: Prisma.AdUpdateArgs): Promise<PrismaAd> {
    return this.prisma.ad.update(args);
  }
  async deleteAd(args: Prisma.AdDeleteArgs): Promise<PrismaAd> {
    return this.prisma.ad.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.ad
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async findAdminPanels(
    parentId: string,
    args: Prisma.AdminPanelFindManyArgs
  ): Promise<PrismaAdminPanel[]> {
    return this.prisma.ad
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .adminPanels(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.ad
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.ad
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
