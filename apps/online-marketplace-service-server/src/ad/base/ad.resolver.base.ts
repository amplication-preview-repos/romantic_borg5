/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ad } from "./Ad";
import { AdCountArgs } from "./AdCountArgs";
import { AdFindManyArgs } from "./AdFindManyArgs";
import { AdFindUniqueArgs } from "./AdFindUniqueArgs";
import { CreateAdArgs } from "./CreateAdArgs";
import { UpdateAdArgs } from "./UpdateAdArgs";
import { DeleteAdArgs } from "./DeleteAdArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { AdminPanelFindManyArgs } from "../../adminPanel/base/AdminPanelFindManyArgs";
import { AdminPanel } from "../../adminPanel/base/AdminPanel";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { AdService } from "../ad.service";
@graphql.Resolver(() => Ad)
export class AdResolverBase {
  constructor(protected readonly service: AdService) {}

  async _adsMeta(@graphql.Args() args: AdCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ad])
  async ads(@graphql.Args() args: AdFindManyArgs): Promise<Ad[]> {
    return this.service.ads(args);
  }

  @graphql.Query(() => Ad, { nullable: true })
  async ad(@graphql.Args() args: AdFindUniqueArgs): Promise<Ad | null> {
    const result = await this.service.ad(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ad)
  async createAd(@graphql.Args() args: CreateAdArgs): Promise<Ad> {
    return await this.service.createAd({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Ad)
  async updateAd(@graphql.Args() args: UpdateAdArgs): Promise<Ad | null> {
    try {
      return await this.service.updateAd({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ad)
  async deleteAd(@graphql.Args() args: DeleteAdArgs): Promise<Ad | null> {
    try {
      return await this.service.deleteAd(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: Ad,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AdminPanel], { name: "adminPanels" })
  async findAdminPanels(
    @graphql.Parent() parent: Ad,
    @graphql.Args() args: AdminPanelFindManyArgs
  ): Promise<AdminPanel[]> {
    const results = await this.service.findAdminPanels(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  async getCategory(@graphql.Parent() parent: Ad): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Ad): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
